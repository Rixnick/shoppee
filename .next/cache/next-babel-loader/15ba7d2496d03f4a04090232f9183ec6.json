{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo';\nimport cookie from 'cookie'; //Link Uri\n//const uri = process.env.BACKEND_URI\n\nconst uri = 'http://54.255.10.30/graphql'; //Create Http Linl\n\nconst httpLink = createHttpLink({\n  uri,\n  fetch\n});\nlet cookies; //Set Authorization Link\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  //Get token from cookies\n  //Server Side \n  if (headers) {\n    cookies = cookie.parse(header.cookie || '');\n  } //Client side\n\n\n  if (false) {\n    cookies = cookie.parse(document.cookie || '');\n  }\n\n  const token = cookies && cookies.jwtToken || '';\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? `Bearer ${token}` : ''\n    })\n  };\n});\nexport default withApollo(({\n  initialState\n}) => {\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n} //  {\n//     render: ({ Page, props }) => {\n//       return (\n//         <ApolloProvider client={props.apollo}>\n//           <Page {...props} />\n//         </ApolloProvider>\n//       );\n//     }\n//   }\n);","map":{"version":3,"sources":["C:/Users/paowe/Music/shop-client/apollo/apolloClient.js"],"names":["ApolloClient","createHttpLink","setContext","InMemoryCache","fetch","withApollo","cookie","uri","httpLink","cookies","authLink","_","headers","parse","header","document","token","jwtToken","authorization","initialState","link","concat","cache","restore"],"mappings":";;;;;;AAAA,SAAQA,YAAR,QAA2B,eAA3B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;AACA;;AACA,MAAMC,GAAG,GAAG,6BAAZ,C,CACA;;AACA,MAAMC,QAAQ,GAAGP,cAAc,CAAC;AAACM,EAAAA,GAAD;AAAMH,EAAAA;AAAN,CAAD,CAA/B;AAEA,IAAIK,OAAJ,C,CACA;;AACA,MAAMC,QAAQ,GAAGR,UAAU,CAAC,CAACS,CAAD,EAAI;AAACC,EAAAA;AAAD,CAAJ,KAAkB;AAC5C;AAGA;AACA,MAAGA,OAAH,EAAY;AACVH,IAAAA,OAAO,GAAGH,MAAM,CAACO,KAAP,CAAaC,MAAM,CAACR,MAAP,IAAiB,EAA9B,CAAV;AACD,GAP2C,CAS5C;;;AACA,aAAiC;AAC/BG,IAAAA,OAAO,GAAGH,MAAM,CAACO,KAAP,CAAaE,QAAQ,CAACT,MAAT,IAAmB,EAAhC,CAAV;AACD;;AAED,QAAMU,KAAK,GAAGP,OAAO,IAAIA,OAAO,CAACQ,QAAnB,IAA+B,EAA7C;AACA,SAAO;AACLL,IAAAA,OAAO,kCACFA,OADE;AAELM,MAAAA,aAAa,EAAEF,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,GAAP;AAMD,CArB0B,CAA3B;AAwBA,eAAeX,UAAU,CAAC,CAAC;AAAEc,EAAAA;AAAF,CAAD,KAAsB;AAC9C,SAAO,IAAInB,YAAJ,CAAiB;AACtBoB,IAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBb,QAAhB,CADgB;AAEtBc,IAAAA,KAAK,EAAE,IAAInB,aAAJ,GAAoBoB,OAApB,CAA4BJ,YAAY,IAAI,EAA5C;AAFe,GAAjB,CAAP;AAID,CALwB,CAMzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdyB,CAAzB","sourcesContent":["import {ApolloClient} from 'apollo-client';\r\nimport {createHttpLink} from 'apollo-link-http';\r\nimport {setContext} from 'apollo-link-context';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport withApollo from 'next-with-apollo';\r\nimport cookie from 'cookie'\r\n//Link Uri\r\n//const uri = process.env.BACKEND_URI\r\nconst uri = 'http://54.255.10.30/graphql'\r\n//Create Http Linl\r\nconst httpLink = createHttpLink({uri, fetch});\r\n\r\nlet cookies\r\n//Set Authorization Link\r\nconst authLink = setContext((_, {headers}) => {\r\n  //Get token from cookies\r\n  \r\n\r\n  //Server Side \r\n  if(headers) {\r\n    cookies = cookie.parse(header.cookie || '')\r\n  }\r\n\r\n  //Client side\r\n  if(typeof window !== 'undefined'){\r\n    cookies = cookie.parse(document.cookie || '')\r\n  }\r\n\r\n  const token = cookies && cookies.jwtToken || ''\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : ''\r\n    }\r\n  }\r\n})\r\n\r\n\r\nexport default withApollo(({ initialState }) => {\r\n  return new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache().restore(initialState || {})\r\n  });\r\n},\r\n//  {\r\n//     render: ({ Page, props }) => {\r\n//       return (\r\n//         <ApolloProvider client={props.apollo}>\r\n//           <Page {...props} />\r\n//         </ApolloProvider>\r\n//       );\r\n//     }\r\n//   }\r\n);"]},"metadata":{},"sourceType":"module"}