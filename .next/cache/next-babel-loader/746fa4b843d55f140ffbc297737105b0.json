{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState } from 'react';\nimport ProductList from './ProductList';\nimport Backdrop from '../Backdrop';\nimport Modal from '../Modal'; // import CreateProduct from './CreateProduct';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport { QUERY_PRODUCTS, CREATE_PRODUCT, UPDATE_PRODUCT, MY_PRODUCTS } from '../../graphql/Products';\n\nclass UserProduct extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      creating: false\n    });\n\n    _defineProperty(this, \"CreateEventHandler\", () => {\n      this.setState({\n        creating: true\n      });\n    });\n\n    _defineProperty(this, \"modalConfirmHandler\", () => {\n      this.setState({\n        creating: false\n      });\n    });\n\n    _defineProperty(this, \"modalCancelHandler\", () => {\n      this.setState({\n        creating: false\n      });\n    });\n\n    _defineProperty(this, \"_renderCreateProduct\", () => () => {\n      const {\n        0: edit,\n        1: setEdit\n      } = useState(false);\n      const {\n        0: file,\n        1: setFile\n      } = useState(null);\n      const {\n        0: productData,\n        1: setProductData\n      } = useState({\n        name: '',\n        description: '',\n        price: '',\n        stockqty: '',\n        imageUrl: ''\n      });\n      const [createProduct, {\n        loading,\n        error\n      }] = useMutation(CREATE_PRODUCT, {\n        refetchQueries: [{\n          query: QUERY_PRODUCTS\n        }]\n      });\n\n      const handleChange = e => setProductData(_objectSpread(_objectSpread({}, productData), {}, {\n        [e.target.name]: e.target.value\n      }));\n\n      const selectFile = e => {\n        const files = e.target.files;\n        setFile(files[0]); //console.log(files)\n      }; //Upload File to Cloudinary\n\n\n      const uploadFile = async () => {\n        const data = new FormData();\n        data.append('file', file);\n        data.append('upload_preset', 'shoppin');\n        const res = await fetch('https://api.cloudinary.com/v1_1/swizce/image/upload', {\n          method: 'post',\n          body: data\n        });\n        const result = await res.json(); //console.log('image result',  result)\n\n        return result.secure_url;\n      };\n\n      const handleSubmit = async e => {\n        try {\n          e.preventDefault();\n          const url = await uploadFile(); // console.log('image Url:', url)\n\n          if (url) {\n            const result = await createProduct({\n              variables: _objectSpread(_objectSpread({}, productData), {}, {\n                price: +productData.price,\n                imageUrl: url\n              })\n            }); //console.log('Product Data:', result)\n\n            return result;\n          }\n\n          Router.push('/userProducts');\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n      return __jsx(\"div\", {\n        className: \"create-product__Card\"\n      }, __jsx(\"form\", {\n        onSubmit: handleSubmit\n      }, __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"productname\"\n      }, \"Product Name:\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Enter Product Name\",\n        value: productData.name,\n        onChange: handleChange\n      })), __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"address\"\n      }, \"Product Desc:\"), __jsx(\"textarea\", {\n        type: \"text\",\n        name: \"description\",\n        placeholder: \"Product Description\",\n        value: productData.description,\n        onChange: handleChange,\n        rows: \"4\"\n      })), __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"city\"\n      }, \"Price:\"), __jsx(\"input\", {\n        type: \"number\",\n        name: \"price\",\n        placeholder: \"Price\",\n        value: productData.price,\n        onChange: handleChange\n      })), __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"stockqty\"\n      }, \"Stock Qty:\"), __jsx(\"input\", {\n        type: \"number\",\n        name: \"stockqty\",\n        placeholder: \"Stock Qualtity\",\n        value: productData.stockqty,\n        onChange: handleChange\n      })), __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"contact\"\n      }, \"--Select Categories--\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"contact\",\n        placeholder: \"Contact No.\"\n      })), __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"contact\"\n      }, \"--Select Brands--\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"contact\",\n        placeholder: \"Contact No.\"\n      })), __jsx(\"div\", {\n        className: \"form-control\"\n      }, __jsx(\"label\", {\n        htmlFor: \"contact\"\n      }, \"Product Image\"), __jsx(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        placeholder: \"file *.png, *.jpg...\",\n        onChange: selectFile\n      })), __jsx(\"div\", {\n        className: \"form-submit\"\n      }, __jsx(\"button\", {\n        className: \"btn__cancel\",\n        onClick: () => Router.push('/userProducts')\n      }, \"Back\"), __jsx(\"button\", {\n        className: \"btn__submit\",\n        type: \"submit\",\n        style: {\n          cursor: !productData.name || !productData.description || !productData.price || !file || loading ? 'not-allowed' : 'pointer'\n        },\n        disabled: !productData.name || !productData.description || !productData.price || !file || loading\n      }, \"Submit\", loading ? 'Submiting...' : ''))));\n    });\n  }\n\n  render() {\n    const CreateForm = this._renderCreateProduct();\n\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"product-content__header\"\n    }, __jsx(\"h2\", {\n      className: \"dash-title\"\n    }, \"All Products List\"), __jsx(\"a\", {\n      onClick: this.CreateEventHandler\n    }, __jsx(\"span\", {\n      className: \"ti-plus\"\n    }), __jsx(\"small\", null, \"Add Product\"))), this.state.creating && __jsx(Backdrop, null), this.state.creating && __jsx(Modal, {\n      title: \"Create Product\",\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler\n    }, __jsx(CreateForm, null)), __jsx(ProductList, null));\n  }\n\n}\n\nexport default UserProduct;","map":null,"metadata":{},"sourceType":"module"}