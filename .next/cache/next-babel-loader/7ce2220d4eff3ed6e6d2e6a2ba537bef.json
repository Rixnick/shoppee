{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paowe\\\\Music\\\\shop-client\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// import App from 'next/app'\nimport fetch from \"isomorphic-unfetch\";\nimport Layout from \"../components/Layouts\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport AuthProvider from \"../contexts/AuthProvider\";\nimport apolloClient from \"../apollo/apolloClient\";\nimport cookie from \"cookie\";\nimport { QUERY_USER } from \"../graphql/User\";\nimport \"../styles/global.scss\";\nimport \"antd/dist/antd.css\";\nimport '@quasar/extras/ionicons-v4/ionicons-v4.css'; //const Backend_uri = process.env.BACKEND_URI\n// function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\n\nfunction App({\n  Component,\n  pageProps,\n  apollo,\n  user\n}) {\n  return __jsx(ApolloProvider, {\n    client: apollo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(AuthProvider, {\n    userData: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 19\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 31\n    }\n  })))));\n}\n\nApp.getInitialProps = async ({\n  ctx,\n  router\n}) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  if (false) {\n    return __NEXT_DATA__.props.pageProps;\n  } //console.log('Router -->', router)\n\n\n  const {\n    headers\n  } = ctx.req;\n  const cookies = headers && cookie.parse(headers.cookie || \"\");\n  const token = cookies && cookies.jwtToken;\n\n  if (!token) {\n    if (router.pathname === \"/Dashboard\" || router.pathname === \"/Cart\" || router.pathname === \"/Brands\" || router.pathname === \"/Categories\" || router.pathname === \"/Myproducts\" || router.pathname === \"/Myproducts/createProduct\" || router.pathname === \"/Profile\" || router.pathname === \"/Custorder\" || router.pathname === \"/Checkout\" || router.pathname === \"/Bank\") {\n      //Use OR To Protected more Routers\n      ctx.res.writeHead(302, {\n        Location: \"/signin\"\n      }); //302 Redirect Route code\n\n      ctx.res.end();\n    } //Add More Protected route here\n\n\n    return null;\n  } //\"http://localhost:5000/graphql\"\n\n\n  const response = await fetch(\"http://54.255.10.30/graphql\", {\n    method: \"post\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      authorization: `Bearer ${token}` || \"\"\n    },\n    body: JSON.stringify(QUERY_USER)\n  }); //console.log(\"response data:\", response);\n\n  if (response.ok) {\n    const result = await response.json();\n    return {\n      user: result.data.user\n    }; //console.log('User Info -->',  result)\n  } else {\n    if (router.pathname === \"/carts\") {\n      ctx.res.writeHead(302, {\n        Location: '/signin'\n      }); //302 Redirect Route code\n\n      ctx.res.end();\n    } //Add More Protected route here\n\n\n    return null;\n  }\n\n  console.log(ctx.req.headers);\n};\n\nexport default apolloClient(App);","map":{"version":3,"sources":["C:/Users/paowe/Music/shop-client/pages/_app.js"],"names":["fetch","Layout","ApolloProvider","AuthProvider","apolloClient","cookie","QUERY_USER","App","Component","pageProps","apollo","user","getInitialProps","ctx","router","__NEXT_DATA__","props","headers","req","cookies","parse","token","jwtToken","pathname","res","writeHead","Location","end","response","method","authorization","body","JSON","stringify","ok","result","json","data","console","log"],"mappings":"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","sourcesContent":["// import App from 'next/app'\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Layout from \"../components/Layouts\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport AuthProvider from \"../contexts/AuthProvider\";\r\nimport apolloClient from \"../apollo/apolloClient\";\r\nimport cookie from \"cookie\";\r\nimport { QUERY_USER } from \"../graphql/User\";\r\nimport \"../styles/global.scss\";\r\nimport \"antd/dist/antd.css\";\r\nimport '@quasar/extras/ionicons-v4/ionicons-v4.css';\r\n\r\n\r\n//const Backend_uri = process.env.BACKEND_URI\r\n\r\n// function MyApp({ Component, pageProps, apollo }) {\r\n//   return (\r\n//    <ApolloProvider client={apollo}>\r\n//       <Layout>\r\n//         <Component {...pageProps} />\r\n//       </Layout>\r\n//    </ApolloProvider>\r\n//   )\r\n// }\r\n\r\nfunction App({ Component, pageProps, apollo, user }) {\r\n      return (\r\n            <ApolloProvider client={apollo}>\r\n                  <AuthProvider userData={user}>\r\n                        <Layout>\r\n                              <Component {...pageProps} />\r\n                        </Layout>\r\n                  </AuthProvider>\r\n            </ApolloProvider>\r\n      );\r\n}\r\n\r\n\r\n\r\nApp.getInitialProps =  async ({ ctx, router }) => {\r\n      // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n      if (process.browser) {\r\n            return __NEXT_DATA__.props.pageProps;\r\n      }\r\n\r\n      //console.log('Router -->', router)\r\n\r\n      const { headers } = ctx.req;\r\n      const cookies = headers && cookie.parse(headers.cookie || \"\");\r\n      const token = cookies && cookies.jwtToken;\r\n\r\n      if (!token) {\r\n            if (\r\n                    router.pathname === \"/Dashboard\" ||\r\n                    router.pathname === \"/Cart\" ||\r\n                    router.pathname === \"/Brands\" ||\r\n                    router.pathname === \"/Categories\" ||\r\n                    router.pathname === \"/Myproducts\" ||\r\n                    router.pathname === \"/Myproducts/createProduct\" ||\r\n                    router.pathname === \"/Profile\" ||\r\n                    router.pathname === \"/Custorder\" ||\r\n                    router.pathname === \"/Checkout\" ||\r\n                    router.pathname === \"/Bank\"\r\n            ) {\r\n                  //Use OR To Protected more Routers\r\n                  ctx.res.writeHead(302, { Location: \"/signin\" }); //302 Redirect Route code\r\n                  ctx.res.end();\r\n            }\r\n            //Add More Protected route here\r\n            return null;\r\n      }\r\n      //\"http://localhost:5000/graphql\"\r\n      const response = await fetch(\"http://54.255.10.30/graphql\", {\r\n            method: \"post\",\r\n            headers: {\r\n                  \"Content-type\": \"application/json\",\r\n                  authorization: `Bearer ${token}` || \"\",\r\n            },\r\n            body: JSON.stringify(QUERY_USER),\r\n      });\r\n      //console.log(\"response data:\", response);\r\n      if (response.ok) {\r\n            const result = await response.json();\r\n            return { user: result.data.user };\r\n            //console.log('User Info -->',  result)\r\n      } else {\r\n            if(router.pathname === \"/carts\") {\r\n              ctx.res.writeHead(302, {Location: '/signin'}) //302 Redirect Route code\r\n              ctx.res.end()\r\n            }\r\n            //Add More Protected route here\r\n            return null;\r\n      }\r\n      console.log(ctx.req.headers)\r\n};\r\n\r\nexport default apolloClient(App);\r\n"]},"metadata":{},"sourceType":"module"}