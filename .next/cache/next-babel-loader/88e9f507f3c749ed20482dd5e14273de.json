{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/home/loki/Desktop/Projects/Shoppin/shop-client/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layouts';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport AuthProvider from '../contexts/AuthProvider';\nimport apolloClient from '../apollo/apolloClient';\nimport cookie from 'cookie';\nimport { QUERY_USER } from '../graphql/User'; // function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      apollo = _ref.apollo,\n      user = _ref.user;\n  return __jsx(ApolloProvider, {\n    client: apollo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(AuthProvider, {\n    userData: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  })))));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, router, headers, cookies, token, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx, router = _ref2.router;\n\n            if (!true) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", __NEXT_DATA__.props.pageProps);\n\n          case 3:\n            //console.log('Router -->', router)\n            headers = ctx.req.headers;\n            cookies = headers && cookie.parse(headers.cookie || '');\n            token = cookies && cookies.jwtToken;\n\n            if (token) {\n              _context.next = 9;\n              break;\n            }\n\n            if (router.pathname === '/carts' || router.pathname === '/manageProducts') {\n              //Use OR To Protected more Routers\n              ctx.res.writeHead(302, {\n                Location: '/signin'\n              }); //302 Redirect Route code\n\n              ctx.res.end();\n            } //Add More Protected route here\n\n\n            return _context.abrupt(\"return\", null);\n\n          case 9:\n            _context.next = 11;\n            return fetch(\"http://localhost:5000/graphql\", {\n              method: 'post',\n              headers: {\n                'Content-type': 'application/json',\n                authorization: \"Bearer \".concat(token) || \"\"\n              },\n              body: JSON.stringify(QUERY_USER)\n            });\n\n          case 11:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 15;\n            return response.json();\n\n          case 15:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              user: result.data.user\n            });\n\n          case 19:\n            if (router.pathname === \"/carts\") {\n              ctx.res.writeHead(302, {\n                Location: '/signin'\n              }); //302 Redirect Route code\n\n              ctx.res.end();\n            } //Add More Protected route here\n\n\n            return _context.abrupt(\"return\", null);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = apolloClient(MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/loki/Desktop/Projects/Shoppin/shop-client/pages/_app.js"],"names":["fetch","Layout","ApolloProvider","AuthProvider","apolloClient","cookie","QUERY_USER","MyApp","Component","pageProps","apollo","user","getInitialProps","ctx","router","__NEXT_DATA__","props","headers","req","cookies","parse","token","jwtToken","pathname","res","writeHead","Location","end","method","authorization","body","JSON","stringify","response","ok","json","result","data"],"mappings":"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","sourcesContent":["// import App from 'next/app'\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layouts';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport AuthProvider from '../contexts/AuthProvider';\nimport apolloClient from '../apollo/apolloClient';\nimport cookie from 'cookie';\nimport {QUERY_USER} from '../graphql/User';\n// function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\n\n\nfunction MyApp({ Component, pageProps, apollo, user }) {\n  \n  return (\n    <ApolloProvider client={apollo}>\n      <AuthProvider userData={user}>\n        <Layout>\n          <Component {...pageProps} />\n        </Layout>\n      </AuthProvider>\n    </ApolloProvider>\n  )\n}\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\nMyApp.getInitialProps = async ({ctx, router}) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  if(process.browser) {\n    return __NEXT_DATA__.props.pageProps\n  }\n\n  //console.log('Router -->', router)\n\n  const {headers} = ctx.req;\n  const cookies = headers && cookie.parse(headers.cookie || '')\n  const token = cookies && cookies.jwtToken;\n\n  if(!token) {\n    if(router.pathname === '/carts' || router.pathname === '/manageProducts') { //Use OR To Protected more Routers\n      ctx.res.writeHead(302, {Location: '/signin'}) //302 Redirect Route code\n      ctx.res.end()\n    }\n    //Add More Protected route here\n    return null\n  }\n  const response = await fetch(\"http://localhost:5000/graphql\", {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json',\n      authorization: `Bearer ${token}` || \"\"\n    },\n    body: JSON.stringify(QUERY_USER)\n  })\n\n  if(response.ok){\n    const result = await response.json()\n    return {user: result.data.user}\n    //console.log('Result -->', result)\n  } else {\n    if(router.pathname === \"/carts\") {\n      ctx.res.writeHead(302, {Location: '/signin'}) //302 Redirect Route code\n      ctx.res.end()\n    }\n     //Add More Protected route here\n    return null\n  }\n  // console.log(ctx.req.headers)\n}\n\nexport default apolloClient(MyApp)"]},"metadata":{},"sourceType":"module"}