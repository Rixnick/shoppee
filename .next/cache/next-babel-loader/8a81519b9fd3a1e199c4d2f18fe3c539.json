{"ast":null,"code":"var _jsxFileName = \"/home/loki/Desktop/Projects/Shoppin/shop-client/apollo/apolloClient.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo'; //Link Uri\n\nconst uri = 'http://localhost:5000/graphql'; //Create Http Linl\n\nconst httpLink = createHttpLink({\n  uri,\n  fetch\n}); //Set Authorization Link\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  //Get token from localStorage\n  const token = JSON.parse(localStorage.getItem('jwtToken'));\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? `Bearer ${token}` : ''\n    })\n  };\n});\nexport default withApollo(({\n  initialState\n}) => {\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n  render: ({\n    Page,\n    props\n  }) => {\n    return __jsx(ApolloProvider, {\n      client: props.apollo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(Page, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    })));\n  }\n});","map":{"version":3,"sources":["/home/loki/Desktop/Projects/Shoppin/shop-client/apollo/apolloClient.js"],"names":["ApolloClient","createHttpLink","setContext","InMemoryCache","fetch","withApollo","uri","httpLink","authLink","_","headers","token","JSON","parse","localStorage","getItem","authorization","initialState","link","concat","cache","restore","render","Page","props","apollo"],"mappings":";;;;;;;;;;;;AAAA,SAAQA,YAAR,QAA2B,eAA3B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CACA;;AACA,MAAMC,GAAG,GAAG,+BAAZ,C,CACA;;AACA,MAAMC,QAAQ,GAAGN,cAAc,CAAC;AAACK,EAAAA,GAAD;AAAMF,EAAAA;AAAN,CAAD,CAA/B,C,CAEA;;AACA,MAAMI,QAAQ,GAAGN,UAAU,CAAC,CAACO,CAAD,EAAI;AAACC,EAAAA;AAAD,CAAJ,KAAkB;AAC5C;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAd;AAEA,SAAO;AACLL,IAAAA,OAAO,kCACFA,OADE;AAELM,MAAAA,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,GAAP;AAMD,CAV0B,CAA3B;AAaA,eAAeN,UAAU,CAAC,CAAC;AAAEY,EAAAA;AAAF,CAAD,KAAsB;AAC9C,SAAO,IAAIjB,YAAJ,CAAiB;AACtBkB,IAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBZ,QAAhB,CADgB;AAEtBa,IAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4BJ,YAAY,IAAI,EAA5C;AAFe,GAAjB,CAAP;AAID,CALwB,EAKpB;AACHK,EAAAA,MAAM,EAAE,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAqB;AAC3B,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,KAAK,CAACC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,eAAUD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD;AAPE,CALoB,CAAzB","sourcesContent":["import {ApolloClient} from 'apollo-client';\nimport {createHttpLink} from 'apollo-link-http';\nimport {setContext} from 'apollo-link-context';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo';\n//Link Uri\nconst uri = 'http://localhost:5000/graphql'\n//Create Http Linl\nconst httpLink = createHttpLink({uri, fetch});\n\n//Set Authorization Link\nconst authLink = setContext((_, {headers}) => {\n  //Get token from localStorage\n  const token = JSON.parse(localStorage.getItem('jwtToken'))\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\n\nexport default withApollo(({ initialState }) => {\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n},   {\n  render: ({ Page, props }) => {\n    return (\n      <ApolloProvider client={props.apollo}>\n        <Page {...props} />\n      </ApolloProvider>\n    );\n  }\n}\n);"]},"metadata":{},"sourceType":"module"}