{"ast":null,"code":"var _jsxFileName = \"/home/loki/Desktop/Projects/Shoppin/shop-client/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// import App from 'next/app'\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layouts';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport AuthProvider from '../contexts/AuthProvider';\nimport apolloClient from '../apollo/apolloClient';\nimport cookie from 'cookie'; // function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\n\nconst QUERY_USER = {\n  query: `\n    query {\n      user{\n        id\n        username\n        email\n        products{\n          id\n        }\n        carts{\n          id\n          product{\n            name\n            price\n            imageUrl\n          }\n          qualtity\n        }\n      }\n    }\n  `\n};\n\nfunction MyApp({\n  Component,\n  pageProps,\n  apollo,\n  user\n}) {\n  return __jsx(ApolloProvider, {\n    client: apollo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(AuthProvider, {\n    userData: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })))));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n\n\nMyApp.getInitialProps = async ({\n  ctx,\n  router\n}) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  if (false) {\n    return __NEXT_DATA__.props.pageProps;\n  }\n\n  console.log('Router -->', router);\n  const {\n    headers\n  } = ctx.req;\n  const cookies = headers && cookie.parse(headers.cookie || '');\n  const token = cookies && cookies.jwtToken; //console.log(token)\n\n  const response = await fetch(\"http://localhost:5000/graphql\", {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json',\n      authorization: `Bearer ${token}` || \"\"\n    },\n    body: JSON.stringify(QUERY_USER)\n  });\n\n  if (response.ok) {\n    const result = await response.json();\n    return {\n      user: result.data.user\n    }; //console.log('Result -->', result)\n  } else {\n    return null;\n  } // console.log(ctx.req.headers)\n\n};\n\nexport default apolloClient(MyApp);","map":{"version":3,"sources":["/home/loki/Desktop/Projects/Shoppin/shop-client/pages/_app.js"],"names":["fetch","Layout","ApolloProvider","AuthProvider","apolloClient","cookie","QUERY_USER","query","MyApp","Component","pageProps","apollo","user","getInitialProps","ctx","router","__NEXT_DATA__","props","console","log","headers","req","cookies","parse","token","jwtToken","response","method","authorization","body","JSON","stringify","ok","result","json","data"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;;;AADS,CAAnB;;AAyBA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,MAAxB;AAAgCC,EAAAA;AAAhC,CAAf,EAAuD;AAErD,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAEC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,CADF,CADF;AASD,C,CACD;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACK,eAAN,GAAwB,OAAO;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAP,KAAyB;AAC/C;AACA,aAAoB;AAClB,WAAOC,aAAa,CAACC,KAAd,CAAoBP,SAA3B;AACD;;AAEDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,MAA1B;AAEA,QAAM;AAACK,IAAAA;AAAD,MAAYN,GAAG,CAACO,GAAtB;AACA,QAAMC,OAAO,GAAGF,OAAO,IAAIf,MAAM,CAACkB,KAAP,CAAaH,OAAO,CAACf,MAAR,IAAkB,EAA/B,CAA3B;AACA,QAAMmB,KAAK,GAAGF,OAAO,IAAIA,OAAO,CAACG,QAAjC,CAV+C,CAY/C;;AAEA,QAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC,+BAAD,EAAkC;AAC5D2B,IAAAA,MAAM,EAAE,MADoD;AAE5DP,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPQ,MAAAA,aAAa,EAAG,UAASJ,KAAM,EAAhB,IAAqB;AAF7B,KAFmD;AAM5DK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAezB,UAAf;AANsD,GAAlC,CAA5B;;AASA,MAAGoB,QAAQ,CAACM,EAAZ,EAAe;AACb,UAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAArB;AACA,WAAO;AAACtB,MAAAA,IAAI,EAAEqB,MAAM,CAACE,IAAP,CAAYvB;AAAnB,KAAP,CAFa,CAGb;AACD,GAJD,MAIO;AACL,WAAO,IAAP;AACD,GA7B8C,CA8B/C;;AACD,CA/BD;;AAiCA,eAAeR,YAAY,CAACI,KAAD,CAA3B","sourcesContent":["// import App from 'next/app'\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layouts';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport AuthProvider from '../contexts/AuthProvider';\nimport apolloClient from '../apollo/apolloClient';\nimport cookie from 'cookie'\n// function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\nconst QUERY_USER = {\n  query: `\n    query {\n      user{\n        id\n        username\n        email\n        products{\n          id\n        }\n        carts{\n          id\n          product{\n            name\n            price\n            imageUrl\n          }\n          qualtity\n        }\n      }\n    }\n  `\n}\n\n\nfunction MyApp({ Component, pageProps, apollo, user }) {\n  \n  return (\n    <ApolloProvider client={apollo}>\n      <AuthProvider userData={user}>\n        <Layout>\n          <Component {...pageProps} />\n        </Layout>\n      </AuthProvider>\n    </ApolloProvider>\n  )\n}\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\nMyApp.getInitialProps = async ({ctx, router}) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  if(process.browser) {\n    return __NEXT_DATA__.props.pageProps\n  }\n\n  console.log('Router -->', router)\n\n  const {headers} = ctx.req;\n  const cookies = headers && cookie.parse(headers.cookie || '')\n  const token = cookies && cookies.jwtToken;\n\n  //console.log(token)\n\n  const response = await fetch(\"http://localhost:5000/graphql\", {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json',\n      authorization: `Bearer ${token}` || \"\"\n    },\n    body: JSON.stringify(QUERY_USER)\n  })\n\n  if(response.ok){\n    const result = await response.json()\n    return {user: result.data.user}\n    //console.log('Result -->', result)\n  } else {\n    return null\n  }\n  // console.log(ctx.req.headers)\n}\n\nexport default apolloClient(MyApp)"]},"metadata":{},"sourceType":"module"}