{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/home/loki/Desktop/Projects/Shoppin/shop-client/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layouts';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport AuthProvider from '../contexts/AuthProvider';\nimport apolloClient from '../apollo/apolloClient';\nimport cookie from 'cookie'; // function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\n\nvar QUERY_USER = {\n  query: \"\\n    query {\\n      user{\\n        id\\n        username\\n        email\\n        products{\\n          id\\n        }\\n        carts{\\n          id\\n          product{\\n            name\\n            price\\n            imageUrl\\n          }\\n          qualtity\\n        }\\n      }\\n    }\\n  \"\n};\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      apollo = _ref.apollo;\n  return __jsx(ApolloProvider, {\n    client: apollo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(AuthProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })))));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, headers, cookies, token, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx;\n\n            if (!true) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", __NEXT_DATA__.props.pageProps);\n\n          case 3:\n            headers = ctx.req.headers;\n            cookies = headers && cookie.parse(headers.cookie || '');\n            token = cookies && cookies.jwtToken;\n            console.log(token);\n            _context.next = 9;\n            return fetch(\"http://localhost:5000/graphql\", {\n              method: 'post',\n              headers: {\n                'Content-type': 'application/json',\n                authorization: \"Bearer \".concat(token) || \"\"\n              },\n              body: body\n            });\n\n          case 9:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 13;\n            return response.json();\n\n          case 13:\n            result = _context.sent;\n            console.log(result);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = apolloClient(MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/loki/Desktop/Projects/Shoppin/shop-client/pages/_app.js"],"names":["fetch","Layout","ApolloProvider","AuthProvider","apolloClient","cookie","QUERY_USER","query","MyApp","Component","pageProps","apollo","getInitialProps","ctx","__NEXT_DATA__","props","headers","req","cookies","parse","token","jwtToken","console","log","method","authorization","body","response","ok","json","result"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK;AADY,CAAnB;;AAyBA,SAASC,KAAT,OAAiD;AAAA,MAAhCC,SAAgC,QAAhCA,SAAgC;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;AAAA,MAAVC,MAAU,QAAVA,MAAU;AAC/C,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,CADF,CADF;AASD,C,CACD;AACA;AACA;AACA;AACA;;;KAfSF,K;;AAgBTA,KAAK,CAACI,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,YAAAA,GAAR,SAAQA,GAAR;;AAAA;AAAA;AAAA;AAAA;;AAAA,6CAGbC,aAAa,CAACC,KAAd,CAAoBL,SAHP;;AAAA;AAMfM,YAAAA,OANe,GAMJH,GAAG,CAACI,GANA,CAMfD,OANe;AAOhBE,YAAAA,OAPgB,GAONF,OAAO,IAAIX,MAAM,CAACc,KAAP,CAAaH,OAAO,CAACX,MAAR,IAAkB,EAA/B,CAPL;AAQhBe,YAAAA,KARgB,GAQRF,OAAO,IAAIA,OAAO,CAACG,QARX;AAUtBC,YAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAVsB;AAAA,mBAYCpB,KAAK,CAAC,+BAAD,EAAkC;AAC5DwB,cAAAA,MAAM,EAAE,MADoD;AAE5DR,cAAAA,OAAO,EAAE;AACP,gCAAgB,kBADT;AAEPS,gBAAAA,aAAa,EAAE,iBAAUL,KAAV,KAAqB;AAF7B,eAFmD;AAM5DM,cAAAA,IAAI,EAAJA;AAN4D,aAAlC,CAZN;;AAAA;AAYhBC,YAAAA,QAZgB;;AAAA,iBAqBnBA,QAAQ,CAACC,EArBU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAsBCD,QAAQ,CAACE,IAAT,EAtBD;;AAAA;AAsBdC,YAAAA,MAtBc;AAuBpBR,YAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;;AAvBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AA4BA,qBAAe1B,YAAY,CAACI,KAAD,CAA3B","sourcesContent":["// import App from 'next/app'\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layouts';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport AuthProvider from '../contexts/AuthProvider';\nimport apolloClient from '../apollo/apolloClient';\nimport cookie from 'cookie'\n// function MyApp({ Component, pageProps, apollo }) {\n//   return (\n//    <ApolloProvider client={apollo}>\n//       <Layout>\n//         <Component {...pageProps} />\n//       </Layout>\n//    </ApolloProvider>\n//   )\n// }\nconst QUERY_USER = {\n  query: `\n    query {\n      user{\n        id\n        username\n        email\n        products{\n          id\n        }\n        carts{\n          id\n          product{\n            name\n            price\n            imageUrl\n          }\n          qualtity\n        }\n      }\n    }\n  `\n}\n\n\nfunction MyApp({ Component, pageProps, apollo }) {\n  return (\n    <ApolloProvider client={apollo}>\n      <AuthProvider>\n        <Layout>\n          <Component {...pageProps} />\n        </Layout>\n      </AuthProvider>\n    </ApolloProvider>\n  )\n}\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\nMyApp.getInitialProps = async ({ctx}) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  if(process.browser) {\n    return __NEXT_DATA__.props.pageProps\n  }\n\n  const {headers} = ctx.req;\n  const cookies = headers && cookie.parse(headers.cookie || '')\n  const token = cookies && cookies.jwtToken;\n\n  console.log(token)\n\n  const response = await fetch(\"http://localhost:5000/graphql\", {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json',\n      authorization: `Bearer ${token}` || \"\"\n    },\n    body\n  })\n\n  if(response.ok){\n    const result = await response.json()\n    console.log(result)\n  }\n  // console.log(ctx.req.headers)\n}\n\nexport default apolloClient(MyApp)"]},"metadata":{},"sourceType":"module"}