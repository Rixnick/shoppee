{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/loki/Desktop/Projects/Shoppin/shop-client/apollo/apolloClient.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport cookie from 'cookie'; //Link Uri\n\nvar uri = 'http://localhost:5000/graphql'; //Create Http Linl\n\nvar httpLink = createHttpLink({\n  uri: uri,\n  fetch: fetch\n});\nvar cookies; //Set Authorization Link\n\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n\n  //Get token from cookies\n  //Server Side \n  if (headers) {\n    cookies = cookie.parse(header.cookie || '');\n  } //Client side\n\n\n  if (true) {\n    cookies = cookie.parse(document.cookie || '');\n  }\n\n  var token = cookies.jwtToken;\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  };\n});\nexport default _c2 = withApollo(_c = function _c(_ref2) {\n  var initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n  render: function render(_ref3) {\n    var Page = _ref3.Page,\n        props = _ref3.props;\n    return __jsx(ApolloProvider, {\n      client: props.apollo,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, __jsx(Page, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    })));\n  }\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$withApollo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/loki/Desktop/Projects/Shoppin/shop-client/apollo/apolloClient.js"],"names":["ApolloClient","createHttpLink","setContext","InMemoryCache","fetch","withApollo","ApolloProvider","cookie","uri","httpLink","cookies","authLink","_","headers","parse","header","document","token","jwtToken","authorization","initialState","link","concat","cache","restore","render","Page","props","apollo"],"mappings":";;;;;;;;;;;;;AAAA,SAAQA,YAAR,QAA2B,eAA3B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AACA,IAAMC,GAAG,GAAG,+BAAZ,C,CACA;;AACA,IAAMC,QAAQ,GAAGR,cAAc,CAAC;AAACO,EAAAA,GAAG,EAAHA,GAAD;AAAMJ,EAAAA,KAAK,EAALA;AAAN,CAAD,CAA/B;AAEA,IAAIM,OAAJ,C,CACA;;AACA,IAAMC,QAAQ,GAAGT,UAAU,CAAC,UAACU,CAAD,QAAkB;AAAA,MAAbC,OAAa,QAAbA,OAAa;;AAC5C;AAGA;AACA,MAAGA,OAAH,EAAY;AACVH,IAAAA,OAAO,GAAGH,MAAM,CAACO,KAAP,CAAaC,MAAM,CAACR,MAAP,IAAiB,EAA9B,CAAV;AACD,GAP2C,CAS5C;;;AACA,YAAiC;AAC/BG,IAAAA,OAAO,GAAGH,MAAM,CAACO,KAAP,CAAaE,QAAQ,CAACT,MAAT,IAAmB,EAAhC,CAAV;AACD;;AAED,MAAMU,KAAK,GAAGP,OAAO,CAACQ,QAAtB;AACA,SAAO;AACLL,IAAAA,OAAO,kCACFA,OADE;AAELM,MAAAA,aAAa,EAAEF,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,GAAP;AAMD,CArB0B,CAA3B;AAwBA,qBAAeZ,UAAU,MAAC,mBAAsB;AAAA,MAAnBe,YAAmB,SAAnBA,YAAmB;AAC9C,SAAO,IAAIpB,YAAJ,CAAiB;AACtBqB,IAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBb,QAAhB,CADgB;AAEtBc,IAAAA,KAAK,EAAE,IAAIpB,aAAJ,GAAoBqB,OAApB,CAA4BJ,YAAY,IAAI,EAA5C;AAFe,GAAjB,CAAP;AAID,CALwB,EAKtB;AACCK,EAAAA,MAAM,EAAE,uBAAqB;AAAA,QAAlBC,IAAkB,SAAlBA,IAAkB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AAC3B,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,KAAK,CAACC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,eAAUD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD;AAPF,CALsB,CAAzB","sourcesContent":["import {ApolloClient} from 'apollo-client';\nimport {createHttpLink} from 'apollo-link-http';\nimport {setContext} from 'apollo-link-context';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport cookie from 'cookie'\n//Link Uri\nconst uri = 'http://localhost:5000/graphql'\n//Create Http Linl\nconst httpLink = createHttpLink({uri, fetch});\n\nlet cookies\n//Set Authorization Link\nconst authLink = setContext((_, {headers}) => {\n  //Get token from cookies\n  \n\n  //Server Side \n  if(headers) {\n    cookies = cookie.parse(header.cookie || '')\n  }\n\n  //Client side\n  if(typeof window !== 'undefined'){\n    cookies = cookie.parse(document.cookie || '')\n  }\n\n  const token = cookies.jwtToken\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\n\nexport default withApollo(({ initialState }) => {\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n    render: ({ Page, props }) => {\n      return (\n        <ApolloProvider client={props.apollo}>\n          <Page {...props} />\n        </ApolloProvider>\n      );\n    }\n  }\n);"]},"metadata":{},"sourceType":"module"}