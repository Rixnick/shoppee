{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo';\nimport cookie from 'cookie'; //Link Uri\n//const uri = process.env.BACKEND_URI\n\nvar uri = 'http://localhost:5000/graphql'; //Create Http Linl\n\nvar httpLink = createHttpLink({\n  uri: uri,\n  fetch: fetch\n});\nvar cookies; //Set Authorization Link\n\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n\n  //Get token from cookies\n  //Server Side \n  if (headers) {\n    cookies = cookie.parse(header.cookie || '');\n  } //Client side\n\n\n  if (true) {\n    cookies = cookie.parse(document.cookie || '');\n  }\n\n  var token = cookies && cookies.jwtToken || '';\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  };\n});\nexport default withApollo(function (_ref2) {\n  var initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n} //  {\n//     render: ({ Page, props }) => {\n//       return (\n//         <ApolloProvider client={props.apollo}>\n//           <Page {...props} />\n//         </ApolloProvider>\n//       );\n//     }\n//   }\n);","map":null,"metadata":{},"sourceType":"module"}